# -*- coding: utf-8 -*-
"""03_MeanShift_Tracking.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U2NaSgiWcVsRwPnGauZaO2i2J7Wr-oup

### Import Libraries
"""

import cv2 as cv
import numpy as np

"""### Capture Video Stream"""

cap = cv.VideoCapture(0)

"""### Take first frame of the video"""

ret, frame = cap.read()

"""### Set up the initial tracking window"""

path = "https://github.com/opencv/opencv/blob/master/data/haarcascades/haarcascade_frontalface_default.xml"
face_casc = cv.CascadeClassifier(path)
face_rects = face_casc.detectMultiScale(frame)

"""### Convert the list to a tuple"""

face_x, face_y, w, h = tuple(face_rects[3])
track_window = (face_x, face_y, w, h)

"""### set up the ROI for tracking"""

roi = frame[face_y:face_y+h,
           face_x:face_x+w]

"""### HSV color maping"""

hsv_roi = cv.cvtColor(roi, cv.COLOR_BGR2HSV)

"""### Histogram to target on each frame for the meanshift calculation"""

roi_hist = cv.calcHist([hsv_roi],
                      [0],
                      None,
                      [180],
                      [0,180])

"""### Normalize the histogram"""

cv.normalize(roi_hist,
             roi_hist,
            0,
            255,
            cv.NORM_MINMAX);

"""### Set the termination criteria
10 iterations or move 1 pt
"""

term_crit = (cv.TERM_CRITERIA_EPS | cv.TERM_CRITERIA_COUNT, 10, 1)

"""### It's a Kind of Magic"""

# While loop
while True: 

    # capture video
    ret, frame = cap.read()
    
    # if statement
    if ret == True:
    
        # Frame in HSV
        hsv = cv.cvtColor(frame, cv.COLOR_BGR2HSV)
        
        # Calculate the base of ROI
        dest_roi = cv.calcBackProject([hsv],
                                      [0],
                                      roi_hist,
                                      [0,180],
                                      1)
        
        
        # Meanshift to get the new coordinates of rectangle
        ret, track_window = cv.meanShift(dest_roi,
                                         track_window,
                                         term_crit)
        
        # Draw new rectangle on image
        x,y,w,h = track_window
        
        # Open new window and display
        img2 = cv.rectangle(frame, (x,y),
                         (x+w, y+h),
                         (255,255,0),
                         3)
        
        cv.imshow('FaceTracker', img2)
        # Close window
        if cv.waitKey(50) & 0xff == ord('q'):
            break
        
    # else statement
    else: 
        break
    
# Release and Destroy
cap.release()
cv.destroyAllWindows()

